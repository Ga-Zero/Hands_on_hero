// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  // phone             String?        @db.VarChar(11)
  // gender            Int
  avatar            String?
  // birthdate         String?
  password          String        @db.VarChar(20)
  email             String?        @unique
  // introduction      String?
  // virtualAccount    Int?            
  // virtualAccountId  Int?

  tokens            Token[]
  chats             Chat[]
  rooms             Room[]
  messages          Message[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  services          Service[]
  // licenseCerts      LicenseCert[]
  inquiries          Inquiry[]   
  answers            Answer[]
  liked              Liked[]  
  @@map("users")

  writtenReviews    Review[]        @relation(name: "WrittenReviews")
  receivedReviews   Review[]        @relation(name: "ReceivedReviews")       


}

model Token {
  id        Int       @id @default(autoincrement())
  payload   String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}



model Service {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  title     String
  content   String    @db.MediumText
  room      Room[]
  serviceDate String
  startTime String
  endTime   String
  Cost      Int
  Method    String
  liked     Liked[]  

  @@index([userId])
}

model Liked {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int

  @@index([serviceId])
  @@index([userId])
}

model Inquiry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String    @db.MediumText
  answer    Answer[]

  @@index([userId])
}

model Answer {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  answer    String    @db.MediumText
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  inquiry      Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId    Int 

  @@index([userId])
  @@index([inquiryId])
}

// model LicenseCert {
//   id                Int      @id @default(autoincrement())
//   licenseNum        String
//   licenseIssueDate  DateTime
//   licenseSerialNum  String
//   user              User    @relation(fields: [userId], references: [id])
//   userId            Int      


//   @@map("license_cert")
// }

// model ServiceMatching {
//   serviceId        Int      @id
//   requesterId      Int      @db.Int
//   createdAt        DateTime
//   serviceTitle     String   @db.VarChar(30)
//   serviceContent   String   @db.VarChar(30)
//   providerId       Int      @db.Int
//   startTime        DateTime
//   endTime          DateTime
//   serviceCost      Int
//   serviceStatus    Int
//   serviceMethod    Int
//   acceptanceStatus Boolean
//   transactions  TransactionHistory[] 

//   @@map("service_matching")
// }

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()

//   @@map("license_cert")
//   @@index([userId])
// }



model Review {
  id        Int      @id @default(autoincrement())
  review    String   @db.MediumText
  score     Int      
  createBy      User     @relation(name: "WrittenReviews", fields: [createById], references: [id])
  createById    Int
  createTo        User     @relation(name: "ReceivedReviews", fields: [createToId], references: [id])
  createToId      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([createById])
  @@index([createToId])
}

// model TransactionHistory {
//   paymentId     Int      @id @default(autoincrement())
//   serviceId     Int      @db.Int
//   amount        Int
//   depositTime   DateTime
//   service       ServiceMatching @relation(fields: [serviceId], references: [serviceId])

//   @@map("transaction_history")
//   @@index([serviceId])
// }


model Room {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chatInvisibleTo Int?
  Service         Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       Int? 

  users User[]
  chats Chat[]
  

  @@index([serviceId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  chat      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  Room   Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int?

  @@index([userId])
  @@index([roomId])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}


model CertificationVerification {
  certificationId   Int      @id
  certificationNumber String  @db.VarChar(20)
  issuanceDate     DateTime
  certificatePageNumber String @db.VarChar(20)
  userId           Int      @db.Int

  @@map("certification_verification")
}

model BlockList {
  blockId           Int      @id
  blockedUserId     Int
  userId            Int      @db.Int

  @@map("block_list")
}

model Notification {
  notificationId     Int      @id
  notificationContent String   @db.Text
  userId             Int      @db.Int
  isRead             Boolean

  @@map("notification")
}


