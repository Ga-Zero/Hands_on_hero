// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Kind {
  Start
  Complete
  Incomplete
}

model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  // phone             String?        @db.VarChar(11)
  avatar            String?
  // password          String        @db.VarChar(20)
  email             String?        @unique
  virtualAccount    Int           @default(0)
  tokens            Token[]
  chats             Chat[]
  rooms             Room[]
  messages          Message[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  services          Service[] 
  inquiries         Inquiry[]   
  answers           Answer[]
  responselists     Responselist[] 
  liked             Liked[] 
  states            State[] 
  //@@map("users")

  writtenReviews    Review[]        @relation(name: "WrittenReviews")
  receivedReviews   Review[]        @relation(name: "ReceivedReviews")       


}

model Token {
  id        Int       @id @default(autoincrement())
  payload   String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}



model Service {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  title             String   
  content           String      @db.MediumText
  serviceDate       String
  startTime         String
  endTime           String
  Cost              Int
 Method            String
  keywords          Keyword[] 
  liked             Liked[]
  responselists     Responselist[] 
  reivew            Review[]  
  states            State[]
  room              Room[]  

  @@index([userId])


}

model Keyword {
  id        Int      @id @default(autoincrement())
  keyword   String   @unique @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]
}

model State {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int
  kind        Kind
  @@index([serviceId])
  @@index([userId])
}

model Liked {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int

  @@index([serviceId])
  @@index([userId])
}

model Responselist {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int

  @@index([serviceId])
  @@index([userId])
}

model Inquiry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String    @db.MediumText
  answer    Answer[]

  @@index([userId])
}

model Answer {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  answer    String    @db.MediumText
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  inquiry      Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId    Int 

  @@index([userId])
  @@index([inquiryId])
}

model Review {
  id        Int      @id @default(autoincrement())
  score1        Int      @default(3)
  score2        Int      @default(3)
  score3        Int      @default(3)
  score4        Int      @default(3)  
  createdBy      User     @relation(name: "WrittenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById    Int
  createdFor     User?     @relation(name: "ReceivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId   Int
  serviceId      Int?      
  serviceInfo    Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([createdById])
  @@index([createdForId])
  @@index([serviceId])
  
}

model Room {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  realName        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chatInvisibleTo Int?
  Service         Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       Int? 
  users User[]
  chats Chat[]

  @@index([serviceId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  chat      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  Room   Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int?

  @@index([userId])
  @@index([roomId])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}

model BlockList {
  blockId           Int      @id
  blockedUserId     Int
  userId            Int      @db.Int

  @@map("block_list")
}