// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  // phone             String?        @db.VarChar(11)
  avatar            String?
  // password          String        @db.VarChar(20)
  email             String?         @unique
  virtualAccount    Int             @default(0)            
  tokens            Token[]
  chats             Chat[]
  rooms             Room[]
  messages          Message[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
  services          Service[]       @relation(name: "services")
  serviceUser       Service[]       @relation(name: "serviceUser")
  inquiries         Inquiry[]   
  answers           Answer[]
  liked             Liked[] 
  writtenReviews    Review[]        @relation(name: "WrittenReviews")
  receivedReviews   Review[]        @relation(name: "ReceivedReviews")   
  blockBy           BlockList[]     @relation(name: "blockBy")
  blockUser         BlockList[]     @relation(name: "blockUser")    

}

model Token {
  id        Int       @id @default(autoincrement())
  payload   String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}



model Service {
  id                Int         @id @default(autoincrement())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(name: "services", fields: [userId], references: [id], onDelete: Cascade)
  userId            Int         // 서비스 글 작성한 사용자
  serviceUser       User?       @relation(name: "serviceUser", fields: [serviceUserId], references: [id], onDelete: Cascade)
  serviceUserId     Int?         // 서비스 글 수락한 사용자
  title             String   
  content           String      @db.MediumText
  serviceDate       String
  startTime         String
  endTime           String
  Cost              Int
  Method            String
  liked             Liked[]
  reivew            Review[]  
  room              Room[]  
  status            ServiceStatus?

  @@index([userId])
  @@index([serviceUserId])

}

enum ServiceStatus {
  None
  Start
  Complete
  Incomplete
}

model Liked {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  service     Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   Int

  @@index([serviceId])
  @@index([userId])
}

model Inquiry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String    @db.MediumText
  answer    Answer[]

  @@index([userId])
}

model Answer {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  answer    String    @db.MediumText
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  inquiry      Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId    Int 

  @@index([userId])
  @@index([inquiryId])
}

model Review {
  id        Int      @id @default(autoincrement())
  score1        Int      @default(3)
  score2        Int      @default(3)
  score3        Int      @default(3)
  score4        Int      @default(3)  
  createdBy      User    @relation(name: "WrittenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById    Int      // 요청자(리뷰 쓰는)
  createdFor     User?    @relation(name: "ReceivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId   Int      // 제공자(리뷰 받는)
  serviceId      Int?      
  serviceInfo    Service?  @relation(fields: [serviceId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([createdById])
  @@index([createdForId])
  @@index([serviceId])
  
}

model Room {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  realName        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chatInvisibleTo Int?
  Service         Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId       Int 
  users User[]
  chats Chat[]

  @@index([serviceId])
}

model Chat {
  id        Int      @id @default(autoincrement())
  chat      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  Room   Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int?

  @@index([userId])
  @@index([roomId])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}

model BlockList {
  id                Int      @id @default(autoincrement())
  blockBy           User     @relation(name: "blockBy", fields: [blockById], references: [id], onDelete: Cascade)
  blockById         Int
  blockUser         User     @relation(name: "blockUser", fields: [blockUserId], references: [id], onDelete: Cascade)
  blockUserId       Int

  @@index([blockById])
  @@index([blockUserId])
}